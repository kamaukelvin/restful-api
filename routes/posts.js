const express = require('express');
const router = express.Router();
// import model
const Post = require('../models/Post');

// instead of using app router wwe use express router
//1. fetching all posts from server 
router.get('/',async(req,res)=>{
try{
    const posts = await Post.find();
    res.json(posts);
}catch(err){
    res.json({message:err})
}
});

// this route is /posts/specific

// router.get('/specific',(req,res)=>{
// res.send('specific page')
// });

//2. posting a post to the server
router.post('/',async (req,res)=>{
    console.log(req.body);
    // creating an instance of our Post model
    const post = new Post({
        
        title:req.body.title,
        description:req.body.description
    });

    // save our instance of Post model to database
    try{
    const savedPost= await post.save()
        res.json(savedPost)
    }catch(err){
        res.json({message:err});
    }
});

//3. get a specific post
router.get('/:postId',async (req,res)=>{
    // console.log(req.params.postId);
    try{
    const singlePost = await Post.findById(req.params.postId);
    res.json(singlePost)
    }catch(err){
        res.json({message:err})
    }
})

//4. delete a specific post
// we use the method remove which accepts an object
// the id (_id) generated by mongodb needs to match the one we get from our input
router.delete('/:postId',async (req,res)=>{
    try{
        const removedPost= await Post.remove({_id:req.params.postId})
        res.json(removedPost)

    }catch(err){
        res.json({message:err})
    }
    
})

//5. update a post
// updateOne takes two parameters that are objects
// first object is the specific post you want to update, we get that by id
// second object is the field we want to update
router.patch('/:postId',async (req,res)=>{
    try{
        const updatedPost= await Post.updateOne(
            {_id:req.params.postId},
            {$set:{title:req.body.title}});
        res.json(updatedPost)

    }catch(err){
        res.json({message:err})
    }
    
})
module.exports = router;